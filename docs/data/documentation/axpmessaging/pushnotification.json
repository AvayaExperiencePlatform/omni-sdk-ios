{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/axpmessaging\/pushnotification"]}],"hierarchy":{"paths":[["doc:\/\/com.avaya.axp.omni.sdk.AXPMessaging\/documentation\/AXPMessaging"]]},"abstract":[{"text":"Enable remote push notifications using the Avaya Experience Platform™ (AXP).","type":"text"}],"sections":[],"metadata":{"title":"Setting up push notification","roleHeading":"Article","role":"article","modules":[{"name":"AXPMessaging"}]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The AXPMessagingSDK supports the use of ","type":"text"},{"type":"reference","identifier":"https:\/\/firebase.google.com\/docs\/cloud-messaging","isActive":true},{"text":" to integrate push notifications into your iOS","type":"text"},{"type":"text","text":" "},{"type":"text","text":"applications. This document explains how to set up Firebase, register your device with Firebase at runtime,"},{"text":" ","type":"text"},{"type":"text","text":"use a notification service extension to support receiving notifications when the app is not in the foreground,"},{"text":" ","type":"text"},{"type":"text","text":"and interact with the AXPMessagingSDK to handle these notifications."}]},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/developers.avayacloud.com\/avaya-experience-platform\/docs\/omni-sdk-push-notifications","isActive":true}]},{"text":"Firebase Setup","anchor":"Firebase-Setup","level":2,"type":"heading"},{"inlineContent":[{"text":"Before integrating the AXPMessagingSDK, you need to set up Firebase for your project.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Please follow the "},{"type":"reference","identifier":"https:\/\/firebase.google.com\/docs\/cloud-messaging\/ios\/client","isActive":true},{"text":" for iOS clients to set up Firebase in your project. That guide will walk you through creating a Firebase project, registering your iOS app with Firebase, adding the Firebase SDK to your app, and initializing Firebase in your app.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To use push notifications with AXP, you need your own web service to connect AXP and Firebase. That service should listen for incoming notification requests from AXP and forward them to Firebase Cloud Messaging: "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/AvayaExperiencePlatform\/omni-sdk-starter-kit\/blob\/master\/%20sample-fcm-push-notification-server"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before registering your device with the FCM Connector, ensure the following prerequisites are met:"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Config ID Acquisition"}]},{"type":"text","text":": The method demonstrated in our sample app, through a token server, serves as an example and is not mandatory. Customers can supply the configId in any method that fits their architecture and security needs, such as:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Hard-coding the configId within the app, suitable for applications with stable configurations.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Retrieving the configId from a custom web service.","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a config ID by following the steps mentioned in following link: ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developers.avayacloud.com\/avaya-experience-platform\/docs\/omni-sdk-push-notifications","overridingTitle":"Create a config ID","overridingTitleInlineContent":[{"type":"text","text":"Create a config ID"}]}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"level":2,"text":"Setup in Notification Service Extension","anchor":"Setup-in-Notification-Service-Extension","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To protect user privacy the push notification sent through Firebase only","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"contains a reference to the AXP message and a notification service extension is needed to fetch that"},{"type":"text","text":" "},{"type":"text","text":"message and populate the notification content:"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Create a Notification Service Extension"}]},{"text":":","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new target to your project, select “Notification Service Extension”, and implement the "},{"code":"didReceive(_:withContentHandler:)","type":"codeVoice"},{"type":"text","text":" method to modify the notification content."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example demonstrating how to process the notification payload, update the notification based on the API response, and"},{"type":"text","text":" "},{"type":"text","text":"display a default message, "},{"type":"codeVoice","code":"You have an unread message"},{"text":", if no data is received from the API.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {","    ","    self.contentHandler = contentHandler","","    guard let localBestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent) else {","     contentHandler(request.content)","     return","    }","","    guard let eventId = request.content.userInfo[\"eventId\"] as? String,","    let sessionId = request.content.userInfo[\"sessionId\"] as? String,","    let conversationId = request.content.userInfo[\"conversationId\"] as? String,","    let eventDateAny = request.content.userInfo[\"eventDate\"],","    let eventDateString = eventDateAny as? String,","    let eventDate = Self.dateFormatter.date(from: eventDateString),","    let tokenData = try? KeychainService(service: \"com.avaya.messaging\").retrieveData(forAccount: \"com.avaya.messaging\", accessGroup: \"group.com.avaya.messaging\"),","        let tokenResponse = try? JSONDecoder().decode(TokenResponse.self, from: tokenData)","   else {","    localBestAttemptContent.body = LocalizedStrings.defaultNotificationMessage","    contentHandler(localBestAttemptContent)","    return","   }","","   let payloadData = NotificationPayload(eventDate: eventDate,","                                        eventId: eventId,","                                        conversationId: conversationId,","                                        sessionId: sessionId)","   let tokenProvider = AXPJWTProvider()","   let configuration = AXPOmniSDKConfig(","     applicationKey: tokenResponse.appKey,","     integrationID: tokenResponse.axpIntegrationId,","     tokenProvider: tokenProvider,","     host: \"https:\/\/\\(tokenResponse.axpHostName)\",","     displayName: dataModel.me?.name ?? \"\",","     sessionParameters: dataModel.sessionParameters,","     pushNotificationConfigID: tokenResponse.configId","   )","","   localBestAttemptContent.title = LocalizedStrings.appName","","   Task {","     do {","       let message = try await AXPMessagingSDK.messageForPushNotificationPayload(notificationPayload: payloadData, configuration: configuration)","       localBestAttemptContent.body = message","     } catch {","       localBestAttemptContent.body = LocalizedStrings.defaultNotificationMessage","     }","       contentHandler(localBestAttemptContent)","     }","   }",""]}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Handle the Expiration","type":"text"}]},{"type":"text","text":":"}]}]}],"type":"orderedList","start":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"serviceExtensionTimeWillExpire()"},{"text":" method to manage scenarios where the service extension is nearing termination.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is invoked when the service extension is about to be terminated by the system, typically because it is running out of the allotted time to fetch and modify the original notification content. It ensures that a default message is displayed in the notification, informing the user of an unread message even if specific content cannot be retrieved in time."}]}]}],"type":"unorderedList"},{"anchor":"Device-Registration-in-Main-App","text":"Device Registration in Main App","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"To handle device registration for push notifications, follow these steps:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Request Notification Permission","type":"text"}]},{"type":"text","text":":"}]}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Request permission from the user to receive notifications."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Register for remote notifications in the "},{"type":"codeVoice","code":"application(_:didFinishLaunchingWithOptions:)"},{"text":" method in your AppDelegate.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["  import Firebase","  func application(_ application: UIApplication,","  didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {","    FirebaseApp.configure()","","    \/\/ Register for remote notifications","    UNUserNotificationCenter.current().delegate = self","    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in","    print(\"Permission granted: \\(granted)\")","    if granted {","      DispatchQueue.main.async {","        application.registerForRemoteNotifications()","      }","    }","  }","  Messaging.messaging().delegate = self","  return true","}"],"type":"codeListing","syntax":"swift"},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Implement Device Token Registration"}],"type":"strong"},{"text":":","type":"text"}]}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Implement the "},{"code":"application(_:didRegisterForRemoteNotificationsWithDeviceToken:)","type":"codeVoice"},{"text":" method to receive the device token.","type":"text"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["  import Firebase","  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {","    Messaging.messaging().apnsToken = deviceToken","  }"]},{"anchor":"Sharing-AXP-Session-and-Token-with-the-Notification-Service-Extension","level":2,"text":"Sharing AXP Session and Token with the Notification Service Extension","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The Notification Service Extension (NSE) needs to use the same AXP session as the main app and share the credentials for accessing it. This is achieved by using App Groups, a feature that allows different parts of your app, like the main app and its extensions, to share data.","type":"text"}]},{"inlineContent":[{"type":"text","text":"To set this up, you need to add the same App Group to both your main app and the NSE. This App Group is used to share the AXP session and credentials between the two."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are the steps to set up an App Group:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"In Xcode, select your project in the Project Navigator.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Select the target for your main app.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the “Capabilities” tab."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Turn on “App Groups”, and add a new App Group by clicking the “+” button. This will be something like "},{"type":"codeVoice","code":"group.com.yourcompany.yourapp"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Repeat steps 2-4 for the NSE target, using the same App Group.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Now, both your main app and the NSE can access the same shared data, including the AXP session and token, through the ","type":"text"},{"code":"UserDefaults","type":"codeVoice"},{"text":" suite named after the App Group.","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.avaya.axp.omni.sdk.AXPMessaging\/documentation\/AXPMessaging\/PushNotification"},"kind":"article","references":{"https://github.com/AvayaExperiencePlatform/omni-sdk-starter-kit/blob/master/%20sample-fcm-push-notification-server":{"identifier":"https:\/\/github.com\/AvayaExperiencePlatform\/omni-sdk-starter-kit\/blob\/master\/%20sample-fcm-push-notification-server","url":"https:\/\/github.com\/AvayaExperiencePlatform\/omni-sdk-starter-kit\/blob\/master\/%20sample-fcm-push-notification-server","type":"link","titleInlineContent":[{"type":"text","text":"Avaya has sample code for such a service"}],"title":"Avaya has sample code for such a service"},"https://firebase.google.com/docs/cloud-messaging":{"url":"https:\/\/firebase.google.com\/docs\/cloud-messaging","type":"link","title":"Firebase Cloud Messaging","identifier":"https:\/\/firebase.google.com\/docs\/cloud-messaging","titleInlineContent":[{"text":"Firebase Cloud Messaging","type":"text"}]},"https://firebase.google.com/docs/cloud-messaging/ios/client":{"identifier":"https:\/\/firebase.google.com\/docs\/cloud-messaging\/ios\/client","url":"https:\/\/firebase.google.com\/docs\/cloud-messaging\/ios\/client","type":"link","titleInlineContent":[{"type":"text","text":"official Firebase Cloud Messaging guide"}],"title":"official Firebase Cloud Messaging guide"},"https://developers.avayacloud.com/avaya-experience-platform/docs/omni-sdk-push-notifications":{"url":"https:\/\/developers.avayacloud.com\/avaya-experience-platform\/docs\/omni-sdk-push-notifications","type":"link","title":"Summary of AXP Push Notification","identifier":"https:\/\/developers.avayacloud.com\/avaya-experience-platform\/docs\/omni-sdk-push-notifications","titleInlineContent":[{"text":"Summary of AXP Push Notification","type":"text"}]},"doc://com.avaya.axp.omni.sdk.AXPMessaging/documentation/AXPMessaging":{"url":"\/documentation\/axpmessaging","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Achieve asynchronous messaging using the Avaya Experience Platform™ (AXP)."}],"title":"AXPMessaging","type":"topic","identifier":"doc:\/\/com.avaya.axp.omni.sdk.AXPMessaging\/documentation\/AXPMessaging"}}}